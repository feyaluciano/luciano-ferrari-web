# Nombre del workflow. Este es el nombre que ver√°s en la pesta√±a "Actions" de tu repositorio.
name: Deploy a GitHub Pages

# Define el evento que disparar√° la ejecuci√≥n de este workflow.
on:
  # Se ejecutar√° cada vez que se suban cambios (push) a la rama 'main'.
  # Si tu rama principal se llama 'master', debes cambiar 'main' por 'master'.
  push:
    branches:
      - master

# Define los permisos que necesitar√° el trabajo (job) para poder ejecutarse.
permissions:
  contents: write # Es necesario darle permiso de escritura para que pueda publicar en la rama de GitHub Pages.

# Agrupa todos los trabajos que se ejecutar√°n. Puedes tener varios.
jobs:
  # Definimos un √∫nico trabajo que llamaremos 'build-and-deploy'.
  build-and-deploy:
    # Especifica el sistema operativo de la m√°quina virtual donde se ejecutar√° el trabajo. 'ubuntu-latest' es la opci√≥n est√°ndar.
    runs-on: ubuntu-latest

    # Define la secuencia de pasos que se ejecutar√°n en este trabajo.
    steps:
      # Paso 1: Clonar el repositorio.
      # Este paso descarga el c√≥digo de tu repositorio en la m√°quina virtual para poder trabajar con √©l.
      - name: Checkout üõéÔ∏è
        # 'uses' indica que vamos a utilizar una "Acci√≥n" pre-construida. 'actions/checkout' es la oficial para clonar el c√≥digo.
        uses: actions/checkout@v4

      # Paso 2: Configurar Node.js.
      # Este paso instala la versi√≥n de Node.js que necesitas para construir tu proyecto.
      - name: Setup Node.js ‚öôÔ∏è
        # Usamos la acci√≥n oficial 'actions/setup-node'.
        uses: actions/setup-node@v4
        # 'with' permite pasar par√°metros a la acci√≥n.
        with:
          # Le indicamos la versi√≥n de Node.js. Usamos '20.x' para ser compatible con tu versi√≥n 20.19.2.
          node-version: '20.x'
          # Optimiza la gesti√≥n de cach√© para las dependencias de npm, acelerando futuras ejecuciones.
          cache: 'npm'

      # Paso 3: Instalar las dependencias del proyecto.
      # Este paso ejecuta 'npm install' para descargar todas las librer√≠as que tu proyecto necesita.
      - name: Install dependencies üì¶
        run: npm install

      # Paso 4: Construir el proyecto Angular.
      # Este paso compila tu aplicaci√≥n de Angular, generando los archivos est√°ticos listos para producci√≥n.
      - name: Build project üèóÔ∏è
        # 'run' ejecuta un comando de terminal.
        # 'npx ng build' es el comando para construir.
        # '--configuration production' asegura que se use la configuraci√≥n de producci√≥n.
        # '--base-href /luciano-ferrari-web/' es CRUCIAL. Le dice a Angular que la web se servir√° desde un subdirectorio.
        run: npx ng build --configuration production --base-href /browser
 

      # Paso 5: Desplegar los archivos a GitHub Pages.
      # Este paso toma los archivos construidos y los publica en la rama especial 'gh-pages' desde donde se sirve tu sitio.
      - name: Deploy to GitHub Pages üöÄ
        # Usamos una acci√≥n popular de la comunidad que simplifica el despliegue.
        uses: peaceiris/actions-gh-pages@v4
        # Configuramos esta acci√≥n.
        with:
          # El 'GITHUB_TOKEN' es una clave secreta que GitHub genera autom√°ticamente para permitir que el workflow act√∫e en tu nombre.
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Le indicamos el directorio que contiene los archivos que queremos publicar.
          # Por defecto, Angular compila el proyecto en 'dist/<nombre-del-proyecto>'.
          publish_dir: ./dist/luciano-ferrari-web